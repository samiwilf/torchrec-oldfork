# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CPU Unit Test CI

on: [push, pull_request]

jobs:

  # build and test on cpu hosts
  build_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [linux.2xlarge]
    steps:
    - name: Check ldd --version
      run: ldd --version
    - name: check cpu info
      shell: bash
      run: |
        cat /proc/cpuinfo
    - name: check distribution info
      shell: bash
      run: |
        cat /proc/version
    - name: Display EC2 information
      shell: bash
      run: |
        set -euo pipefail
        function get_ec2_metadata() {
          # Pulled from instance metadata endpoint for EC2
          # see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
          category=$1
          curl -fsSL "http://169.254.169.254/latest/meta-data/${category}"
        }
        echo "ami-id: $(get_ec2_metadata ami-id)"
        echo "instance-id: $(get_ec2_metadata instance-id)"
        echo "instance-type: $(get_ec2_metadata instance-type)"
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    # Update references
    # TODO: update the git submodule sync after we fixed the auto-sync part
    - name: Git Sumbodule Update
      run: |
        git submodule init
        git submodule update --remote --recursive
        cd third_party/fbgemm/
        git submodule sync
        git submodule update --init --recursive
        git log
    # manually install python3.8 since self-hosted machine does not support the python action feature
    - name: check amazon-linux-extras
      run: |
        sudo yum install -y amazon-linux-extras
        amazon-linux-extras | grep -i python
    - name: update python
      run: |
        sudo amazon-linux-extras install python3.8
    - name: Update pip
      run: |
        sudo yum update -y
        sudo yum -y install git python3-pip
        sudo pip3 install --upgrade pip
    - name: create virtual env
      run: |
        sudo pip3 install --upgrade virtualenv
        virtualenv build_binary_3.8 -p python3.8
    - name: check python version
      run: |
        source build_binary_3.8/bin/activate
        python --version
    - name: Install gcc
      shell: bash
      run: |
        sudo yum group install -y "Development Tools"
    - name: setup Path
      run: |
        echo /usr/local/bin >> $GITHUB_PATH
    - name: Install PyTorch
      shell: bash
      run: |
        source build_binary_3.8/bin/activate
        pip3 install --pre torch -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
    - name: Install Dependencies
      shell: bash
      run: |
        source build_binary_3.8/bin/activate
        pip3 install -r requirements.txt
    - name: Test Installation of dependencies
      run: |
        source build_binary_3.8/bin/activate
        python3 -c "import torch.distributed"
        echo "torch.distributed succeeded"
        python3 -c "import skbuild"
        echo "skbuild succeeded"
        python3 -c "import numpy"
        echo "numpy succeeded"
    - name: Build TorchRec
      run: |
        source build_binary_3.8/bin/activate
        rm -r dist || true
        python setup.py bdist_wheel --package_name torchrec-test-cpu --cpu_only
    - name: Install TorchRec
      run: |
        source build_binary_3.8/bin/activate
        pip3 install dist/torchrec_test_cpu-*.whl
    - name: Test fbgemm_gpu and torchrec installation
      shell: bash
      run: |
        source build_binary_3.8/bin/activate
        python3 -c "import fbgemm_gpu"
        python3 -c "import torchrec"
    - name: Test with pytest
      run: |
        source build_binary_3.8/bin/activate
        pip3 install pytest
        python3 -m pytest torchrec -v -s -W ignore::pytest.PytestCollectionWarning --continue-on-collection-errors -k 'not test_sharding_gloo_cw'
